function [ConfMat]=perfeval_surfacelabels(testind,numlabels)
% PERFEVAL_SURFACELABELS Evaluate the performance of the surface labels
%   estimated by the algorithm.
% 
% USAGE: [ConfMat]=perfeval_surfacelabels(testind,numlabels)
%
% INPUT: 
%   testind - indices of images among the ones in the image directory for 
%       which we have results and want to compute performance.
%   numlabels - number of different classes which were i
%
% OUTPUT:
%   PixErr - An array with fraction of misclassified pixels in each image.
%   ConfMat - A confusion matrix among different labels.
%   flags - boolean array with zero if an image is not used for evaluation
%       (perhaps because we do not have all data for it to be evaluated).
%
% Copyright (c) Varsha Hedau, University of Illinois at Urbana Champaign,
% 2011.
% To use this code or any part of the package, for any purpose, you agree 
% to abide by the restrictions set forth in the file Readme.txtmentioned in the lice

ConfMat=zeros(numlabels,numlabels);
ConfMatnorm=zeros(1,numlabels);

imdir='../Images_resized/';
workspcdir='../spatiallayouttempworkspace/';
imext='jpg';
d=dir([ imdir '*.' imext]);

load([ '../LabelClassifier/Superpixel.mat']);%ground truth

imgind=testind;
cnt=0;
for i=1:length(imgind)
%     i
    imgnum=imgind(i);
    imagename=d(imgind(i)).name;
    img=imread([imdir imagename]);
    [h w kk]=size(img);
    
    filename=fullfile('../Results/',[imagename(1:end-4) '_spatiallayout.mat']);
    if exist(filename)
        load(filename);
    else
        fprintf(1,'No results for image %s\n',imagename);
        continue;
    end
    
    pg=surface_labels.restimated;
    
    [val maxlab]=max(pg{1},[],2);
    
    segext='pnm';
    nsegments=[5 15 25 35 40 60 80 100];
    fn=[workspcdir imagename(1:end-4) '.' segext];
    imseg = processSuperpixelImage(fn);
    
    cimages = msPg2confidenceImages(imseg,pg);
    [aa indd]=max(cimages{1}(:,:,1:6),[],3);
    
    [confmatnorm confusion_mat]=getConfusionMat(maxlab,splabels{imgnum},imseg,numlabels);
    ConfMat=ConfMat+confusion_mat;
    ConfMatnorm=ConfMatnorm+confmatnorm;
    
end

ConfMatnorm=repmat(ConfMatnorm(:),[1 numlabels]);
ConfMat=ConfMat./(ConfMatnorm+eps*(ConfMatnorm==0));
fprintf(1,'\nCONFUSION MATRIX\n');
ConfMat

return;


function [confmatnorm confusion_mat]=getConfusionMat(maxlab,tsplabels,timsegs,numlabels)

confusion_mat=zeros(numlabels,numlabels);

for l1=1:numlabels
    t1=find(tsplabels==l1);
    for l2=1:numlabels
        
        t2=find(maxlab==l2);
        t3=intersect(t1,t2);
        confusion_mat(l1,l2)=sum(timsegs.npixels(t3));
        
    end
    confmatnorm(l1)=sum(timsegs.npixels(t1));
end


return;

