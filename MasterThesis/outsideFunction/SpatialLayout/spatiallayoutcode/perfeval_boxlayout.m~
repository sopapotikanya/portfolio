function [PixErr ConfMat flags]= perfeval_boxlayout(testind,savedir)
% PERFEVAL_BOXLAYOUT Evaluate the perf
%   of a boxlayout and pixel labels of different surfaces. Please refer to 
%   the readme file provided with this software for detailed meaning of 
%   these outputs.
% 
% USAGE: [ boxlayout,surface_labels ] = 
%               getspatiallayout(imdir,imagename,workspcdir)
%
% INPUT: 
%   imdir - direndory containing the original image to be processed. Use '/' 
%       (not '\') to separate directories. 
%   imagename - original image name
%   workspcdir - directory to hold intermediate results. Internally, two
%       independent directories are created inside this directory to hold
%       visualizations and data files.
%
% OUTPUT:
%   binlayout - structure containing the estimated approximation of the
%       indoor scene as a 3D box, with the following fields -
%   .polyg - cell array of size (n x 5), each containing coordinates of
%       planar surfaces of the room (left, right, middle walls, and, floor 
%       and ceiling). The (i,j)-th cell entry corresponds to i-th box
%       layout hypothesis, and j-th plane of that hypothesis.
%   .init - An array of size (n x 2). The i-th row (score,index) represents
%       score and index of a hypothesis in the polyg cell array above, as
%       estimated by our algorithm.
%   .reestimated - An array of size (n x 2). The i-th row (score,index) represents
%       score and index of a hypothesis in the polyg cell array above, as
%       estimated by the second iteration of our algorithm.
%   surface_labels - structure containing the per pixel likelihood of each of
%       the surfaces, and objects, with following fields -
%   .init - An array of size (m x 7), where m is th total number of
%       superpixels detected in the image. The (i,j)-th entry represents
%       the likelihood of the i-th superpixel being labeled as j-th
%       surface.
%
% Copyright (c) Varsha Hedau, University of Illinois at Urbana Champaign,
% 2011.
% To use this code or any part of the package, for any purpose, you agree 
% to abide by the restrictions set forth in the file Readme.txtmentioned in the lice

PixErr=[];
ConfMat=zeros(5,5);
ConfMatnorm=zeros(1,5);
%performance evaluation
%pixel error

imdir='../Images_resized/';
imext='jpg';
d=dir([ imdir '*.' imext]);

imgind=testind;
cnt=1;
cnt2=1;
flags=ones(numel(testind),1);
for i=1:length(imgind)
%     i
    imagename=d(imgind(i)).name;
    img=imread([imdir imagename]);
    [h w kk]=size(img);
    
    filename=fullfile('../Results/',[imagename(1:end-4) '_spatiallayout.mat']);
    if exist(filename)
        load(filename);
    else
        fprintf(1,'No results for image %s\n',imagename);
        flags(i)=0;
        continue
    end
    
    filename=fullfile('../GTParseLabels_resized/',[imagename(1:end-4) '_labels.mat']);
    
    fields=[]; labels=[];
    if exist(filename)
        load(filename);
    else
        flags(i)=0;
        continue;
    end
    
    ind=find(fields==0);
    fields(ind)=6;
    ind=find(labels==0);
    labels(ind)=7;
    
    if numel(boxlayout.reestimated) >0
       vv=boxlayout.reestimated(:,1);
       ii=boxlayout.reestimated(:,2);
       
    end
    
    %get pixel err for the best
    k=1;
    Polyg{1}=boxlayout.polyg{ii(k),1};
    Polyg{2}=boxlayout.polyg{ii(k),2};
    Polyg{3}=boxlayout.polyg{ii(k),3};
    Polyg{4}=boxlayout.polyg{ii(k),4};
    Polyg{5}=boxlayout.polyg{ii(k),5};
    [pixerr]=getPixerr(gtPolyg,Polyg);
    [confmatnorm ,confusion_mat]=getConfusionMat(gtPolyg,Polyg);

    
    PixErr(i)=pixerr;
    ConfMat=ConfMat+confusion_mat;
    ConfMatnorm=ConfMatnorm+confmatnorm;
    cnt=cnt+1;
    
end
ConfMatnorm=repmat(ConfMatnorm(:),[1,5]);
ConfMat=ConfMat./ConfMatnorm;
totpixerr=sum(PixErr.*flags')/sum(flags);
fprintf(1,'\nTOTAL PIXEL ERROR = %5.3f %%\n\n',totpixerr*100);
fprintf(1,'CONFUSION MATRIX\n');
ConfMat

return;




function [pixerr]=getPixerr(gtPolyg,Polyg)
% farea1=farea;
farea1=zeros(1,5);
farea2=zeros(1,5);
for i=1:numel(gtPolyg)
    
    if size(gtPolyg{i},1)>0
        farea1(i)=polyarea([gtPolyg{i}(:,1);gtPolyg{i}(1,1)],[gtPolyg{i}(:,2);gtPolyg{i}(1,2)]);
    end
    
    if size(Polyg{i},1)>0
        farea2(i)=polyarea([Polyg{i}(:,1);Polyg{i}(1,1)],[Polyg{i}(:,2);Polyg{i}(1,2)]);
        
    end
end

cnt=0;
err=[];
% Find intersection area of fields
for i=1:5
    
    if farea1(i)== 0 & farea2(i)==0
        %if both the fields are invisible dont count
        continue;
    elseif farea1(i)>0 & farea2(i)==0
        cnt=cnt+1;
        nInter=0;
    elseif farea1(i)== 0 & farea2(i)>0
        cnt=cnt+1;
        nInter=0;
    else        % farea1(i)>0 & farea2(i)>0
        cnt=cnt+1;
        
        XX1=Polyg{i}(:,1);YY1=Polyg{i}(:,2); %get the polygon
        YY2=gtPolyg{i}(:,2);XX2=gtPolyg{i}(:,1);
        in1=inpolygon(XX1,YY1,[XX2;XX2(1)],[YY2;YY2(1)]);
        in2=inpolygon(XX2,YY2,[XX1;XX1(1)],[YY1;YY1(1)]);
        
        if numel(find(in1==1))==length(in1)
            X0=XX1;Y0=YY1;
        elseif numel(find(in2==1))==length(in2)
            X0=XX2;Y0=YY2;
        else
            [in,on]=inpolygon(XX2,YY2,[XX1;XX1(1)],[YY1;YY1(1)]);
            XX2(find(on)) = XX2(find(on))+1;
            YY2(find(on)) = YY2(find(on))+1;
            [in,on]=inpolygon(XX1,YY1,[XX2;XX2(1)],[YY2;YY2(1)]);;
            XX1(find(on)) = XX1(find(on))+1;
            YY1(find(on)) = YY1(find(on))+1;
            [X0 Y0 ind]=polyints(XX1,YY1,XX2,YY2); %remember to check polybool
        end
        if numel(X0)>0
            nInter=polyarea([X0; X0(1)],[Y0;Y0(1)]);
            
        else
            nInter=0;
        end
    end
    
    
    %     nInter;
    Fdiff(cnt)=1-nInter/(farea1(i)+farea2(i)-nInter);
    err(cnt)=farea1(i)-nInter;
end

% pixerr1=mean(Fdiff);
pixerr=sum(err)/sum(farea1);

return;




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [confmatnorm, confusion_mat]=getConfusionMat(gtPolyg,Polyg)
farea1=zeros(1,5);
farea2=zeros(1,5);
for i=1:numel(gtPolyg)
    
    if size(gtPolyg{i},1)>0
        farea1(i)=polyarea([gtPolyg{i}(:,1);gtPolyg{i}(1,1)],[gtPolyg{i}(:,2);gtPolyg{i}(1,2)]);
    end
    if size(Polyg{i},1)>0
        farea2(i)=polyarea([Polyg{i}(:,1);Polyg{i}(1,1)],[Polyg{i}(:,2);Polyg{i}(1,2)]);
    end
end

cnt=0;
err=[];
confusion_mat=zeros(5,5);
% Find intersection area of fields
for i=1:5
    for j=1:5
        
        if farea1(i)== 0 | farea2(j)==0
            %if both the fields are invisible dont count
            continue;
        end
        
        XX1=Polyg{j}(:,1);YY1=Polyg{j}(:,2); %get the polygon
        YY2=gtPolyg{i}(:,2);XX2=gtPolyg{i}(:,1);
        in1=inpolygon(XX1,YY1,[XX2;XX2(1)],[YY2;YY2(1)]);
        in2=inpolygon(XX2,YY2,[XX1;XX1(1)],[YY1;YY1(1)]);
        
        if numel(find(in1==1))==length(in1)
            X0=XX1;Y0=YY1;
        elseif numel(find(in2==1))==length(in2)
            X0=XX2;Y0=YY2;
        else
            [in,on]=inpolygon(XX2,YY2,[XX1;XX1(1)],[YY1;YY1(1)]);
            XX2(find(on)) = XX2(find(on))+1;
            YY2(find(on)) = YY2(find(on))+1;
            [in,on]=inpolygon(XX1,YY1,[XX2;XX2(1)],[YY2;YY2(1)]);;
            XX1(find(on)) = XX1(find(on))+1;
            YY1(find(on)) = YY1(find(on))+1;
            [X0 Y0 ind]=polyints(XX1,YY1,XX2,YY2); %remember to check polybool
        end
        if numel(X0)>0
            nInter=polyarea([X0; X0(1)],[Y0;Y0(1)]);
        else
            nInter=0;
        end
        confusion_mat(i,j) = nInter;
    end
end

confmatnorm=farea1;
return;
