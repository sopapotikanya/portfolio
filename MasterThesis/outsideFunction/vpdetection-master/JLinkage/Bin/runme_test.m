load JLinkageExamples.mat

tic

% We try to extract planes from the PozzoVeggiani dataset.
% First we generate samples.
% Here are the required parameters:
%  *** JLinkageRandomSamplerMex v.1.0 *** Part of the SamantHa Project
%      Author roberto.toldo@univr.it - Vips Lab - Department of Computer Science - University of Verona(Italy)
%  ***********************************************************************
%  Usage: [Labels] = JLnkRandomSampler(Points, NSamples, ModelType, (FirstSamplingVectorProb = []), (SamplingType = UNIFORM), (Par1), (Par2), (Par3))
%  Input:
%         Points - Input dataset (Dimension x NumberOfPoints)
%         NSamples - Number of desired samples
%         ModelType - type of models extracted. Currently the model supported are: 0 - Planes 1 - 2dLines
%         FirstSamplingVectorProb(facultative) - Associate to each point a (non-uniform) probability to be randomly picked (leave [] to set a uniform probability for each point)
%         SamplingType(facultative) - Non first sampling strategy: 0 - Uniform(default) 1 - Exp 2 - Kd-Tree 3 - Memory Efficient Kd-Tree(Slower)
%         Par1(facultative) - Sigma Exp(default = 1.0) or Neighbor search for Kd-Tree (default = 10)
%         Par2(facultative) - only for kd-tree non first sampling: close points probability (default = 0.8)
%         Par3(facultative) - only for kd-tree non first sampling: far points probability (default = 0.2)
%  Output:
%         Models - Generated hypotesis(Dimension x NSampler)
% We sample with a kd-tree sampling and we generate 10000 hypotesis.
[Models] = JLnkRandomSampler(PozzoVeggiani, 10000, 0, [], 3, 10, 0.8, 0.2);

% Now we need to compute the j-linkage clusterization.
% Here are the parameters that we should set:
%  *** JLinkageLibClusterizeMex v.1.0 *** Part of the SamantHa Project
%      Author roberto.toldo@univr.it - Vips Lab - Department of Computer Science - University of Verona(Italy) 
%  ***********************************************************************
%  Usage: [Labels, PS] = JLnkClusterize(Points, Models, InlierThreshold, ModelType, *KDTreeRange = -1*, *ExistingClusters = []*)
%  Input:
%         Points - Input dataset (Dimension x NumberOfPoints)
%         Models - Hypotesis generated by the JLinkageLibRandomSamplerMex(Dimension x NumberOfModels)
%         InlierThreshold - maximum inlier distance point-model 
%         ModelType - type of models extracted. Currently the model supported are: 0 - Planes 1 - 2dLines
%         KDTreeRange(facultative) - Select the number of neighboards to use with in the agglomerative clustering stage. ( if <= 0 all the points are used; n^2 complexity)
%         ExistingClusters(facultative) - Already existing clusters, Logical Matrix containing Pts X NCluster
%  Output:
%         Labels - Belonging cluster for each point
%         PS - Preference set of resulting clusters

% We set an inlier threshold of 0.1 and we employ the kd-tree approximation
% to speed up the entire process
[Labels] = JLnkClusterize(PozzoVeggiani, Models, 0.1, 0, 10);

toc

% Finally we plot the results - each color denotes the model
showClusters(PozzoVeggiani, Labels, 3);

% If you want the fitting plane for each model, just perform a least square
% fitting on the points belonging to that model.